{"version":3,"sources":["components/notificator/Notificator.js","App.js","serviceWorker.js","index.js"],"names":["Notificator","useState","timeframe","setTimeframe","segundos","setSegundos","Date","toDateString","datetime","setDatetime","notificar","Notification","permission","requestPermission","d","hr","Intl","DateTimeFormat","hour","minute","second","format","icon","body","onclick","window","open","Grid","container","direction","justify","alignItems","spacing","item","Input","value","onChange","e","target","Button","variant","onClick","clickStartNotification","date","console","log","minutosCheck","minutes","getMinutes","toString","push","length","substring","indexOf","getSeconds","setTimeout","color","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSAiHeA,MA7Gf,WAAwB,IAAD,EAEaC,mBAAS,MAFtB,mBAEdC,EAFc,KAEHC,EAFG,OAGWF,mBAAS,KAHpB,mBAGdG,EAHc,KAGJC,EAHI,OAIWJ,oBAAS,IAAIK,MAAOC,gBAJ/B,mBAIdC,EAJc,KAIJC,EAJI,KAcfC,EAAY,WAChB,GAAgC,YAA5BC,aAAaC,WACbD,aAAaE,wBACV,CACH,IAAMC,EAAI,IAAIR,KACRS,EAAK,IAAIC,KAAKC,eAAe,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,OAAQ,YAAaC,OAAOP,GAC9GL,EAAYM,GAES,IAAIJ,aAAa,kBAAmB,CACvDW,KAAM,YACNC,KAAMR,IAEKS,QAAU,WACrBC,OAAOC,KAAK,kDAsCpB,OACI,iCACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,QAAS,GAET,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,yCAEF,kBAACN,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAOC,MAAOjC,EAAWkC,SAxEL,SAAAC,GAC5BlC,EAAakC,EAAEC,OAAOH,WA0EhB,kBAACR,EAAA,EAAD,CAAMM,MAAI,GACR,wCAEF,kBAACN,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACC,EAAA,EAAD,CAAOC,MAAO/B,EAAUgC,SA3EL,SAAAC,GAC3BhC,EAAYgC,EAAEC,OAAOH,YA8EjB,kBAACR,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,QAAS,GAET,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAjEP,SAAzBC,IACJ,IAAIC,EAAO,IAAIrC,KACfsC,QAAQC,IAAIF,GACZ,IAAMG,EAAe,GACjBC,EAAUJ,EAAKK,aAAaC,WAEd,OAAd/C,EACF4C,EAAaI,KAAK,MACK,OAAdhD,GACT4C,EAAaI,KAAK,MAClBJ,EAAaI,KAAK,MAClBJ,EAAaI,KAAK,MAClBJ,EAAaI,KAAK,OACK,MAAdhD,IACT4C,EAAaI,KAAK,KAClBJ,EAAaI,KAAK,KAClBH,EAAWA,EAAQI,OAAS,EAAKJ,EAAQK,UAAU,GAAKL,GAKrDD,EAAaO,QAAQN,IAAY,GAAMJ,EAAKW,aAAaL,aAAe7C,GAM3EM,IAGF6C,YAAW,kBAAMb,MAA2B,MAmCyBc,MAAM,WAAnE,UAEF,kBAAC7B,EAAA,EAAD,CAAMM,MAAI,GACR,kBAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS/B,GAArC,WAIJ,2BAAIF,KCjFGiD,MAtBf,WAEE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,qCAIF,kBAAC/B,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,SAASC,WAAW,SAASC,QAAS,GAC7E,kBAACL,EAAA,EAAD,CAAMM,MAAI,GACR,kBAAC,EAAD,OAEF,kBAACN,EAAA,EAAD,CAAMM,MAAI,GACR,iDCPQ0B,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.8da738f9.chunk.js","sourcesContent":["import React, { useState }  from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Input, Button } from '@material-ui/core';\r\n\r\nfunction Notificator() {\r\n\r\n  const [timeframe, setTimeframe] = useState('15');\r\n  const [segundos, setSegundos] = useState('1');\r\n  const [datetime, setDatetime] = useState(new Date().toDateString());\r\n\r\n  const handleTimeframeChange = e => {\r\n    setTimeframe(e.target.value);\r\n  };\r\n\r\n  const handleSegundosChange = e => {\r\n    setSegundos(e.target.value);\r\n  };\r\n\r\n  const notificar = () => {\r\n    if (Notification.permission !== 'granted')\r\n        Notification.requestPermission();\r\n      else {\r\n        const d = new Date();\r\n        const hr = new Intl.DateTimeFormat('pt-br', { hour: 'numeric', minute: 'numeric', second: 'numeric' }).format(d);\r\n        setDatetime(hr);\r\n\r\n        const notification = new Notification('Fechando barra!', {\r\n          icon: 'clock.png',\r\n          body: hr,\r\n        });\r\n        notification.onclick = function () {\r\n          window.open('http://stackoverflow.com/a/13328397/1269037');\r\n        };\r\n      }\r\n  }\r\n\r\n  const clickStartNotification = () => {\r\n    var date = new Date();\r\n    console.log(date);\r\n    const minutosCheck = [];\r\n    let minutes = date.getMinutes().toString();\r\n\r\n    if (timeframe === \"60\") {\r\n      minutosCheck.push(\"59\");\r\n    } else if (timeframe === \"15\") {\r\n      minutosCheck.push(\"14\");\r\n      minutosCheck.push(\"29\");\r\n      minutosCheck.push(\"44\");\r\n      minutosCheck.push(\"59\");\r\n    } else if (timeframe === \"5\") {\r\n      minutosCheck.push(\"4\");\r\n      minutosCheck.push(\"9\");\r\n      minutes = (minutes.length > 1) ? minutes.substring(1) : minutes;\r\n    }\r\n\r\n\r\n\r\n    if ((minutosCheck.indexOf(minutes) >= 0) && date.getSeconds().toString() === segundos) {\r\n      // if(date.getHours() >= 9 && (minutosCheck.indexOf(minutes) >= 0) && date.getSeconds().toString() === segundosParam ) {\r\n      // if (date.getHours() >= 9 && date.getSeconds() === 30) {\r\n      // const som = document.getElementById(\"som\");\r\n      // som.play();\r\n      // showDateTime();\r\n      notificar();\r\n    }\r\n\r\n    setTimeout(() => clickStartNotification() , 1000);\r\n  }\r\n\r\n  return (\r\n      <section>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          <Grid item >\r\n            <p>Timeframe</p>\r\n          </Grid>\r\n          <Grid item >\r\n            <Input value={timeframe} onChange={handleTimeframeChange} ></Input>\r\n          </Grid>\r\n\r\n          <Grid item >\r\n            <p>Segundos</p>\r\n          </Grid>\r\n          <Grid item >\r\n            <Input value={segundos} onChange={handleSegundosChange}></Input>\r\n          </Grid>\r\n        </Grid>\r\n        \r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          <Grid item >\r\n            <Button variant=\"contained\" onClick={clickStartNotification} color=\"primary\">Start</Button>\r\n          </Grid>\r\n          <Grid item >\r\n            <Button variant=\"contained\" onClick={notificar}>Teste</Button>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <p>{datetime}</p>\r\n      </section>\r\n  );\r\n}\r\n\r\nexport default Notificator;\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport './App.css';\r\nimport Notificator from './components/notificator/Notificator';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          THelp\r\n        </p>\r\n      </header>\r\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2} >\r\n          <Grid item >\r\n            <Notificator />\r\n          </Grid>\r\n          <Grid item >\r\n            <p> Calculo Lote </p>\r\n          </Grid>\r\n      </Grid>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}